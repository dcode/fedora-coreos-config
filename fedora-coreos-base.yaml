# Base packages for a Fedora CoreOS like system
include: minimal.yaml

# Modern defaults we want
boot_location: new
tmp-is-dir: true

# Required by Ignition, and makes the system not compatible with Anaconda
machineid-compat: false

releasever: "29"
automatic_version_prefix: "29"
repos:
  - fedora
  - fedora-updates
  - fedora-updates-testing
  - dustymabe-ignition
  - rfairley-console-login-helper-messages

ignore-removed-users:
  - root
ignore-removed-groups:
  - root
etc-group-members:
  - wheel
  - sudo
  - systemd-journal
  - adm
check-passwd:
  type: "file"
  filename: "passwd"
check-groups:
  type: "file"
  filename: "group"

postprocess:
  - |
    #!/usr/bin/env bash
    set -xeuo pipefail

    # https://github.com/projectatomic/rpm-ostree/issues/1542#issuecomment-419684977
    for x in /etc/yum.repos.d/*modular.repo; do
      sed -i -e 's,enabled=[01],enabled=0,' ${x}
    done

    # The grub bits are mainly designed for desktops, and IMO haven't seen
    # enough testing in concert with ostree. At some point we'll flesh out
    # the full plan in https://github.com/coreos/fedora-coreos-tracker/issues/47
    # NOTE: Also remove 01_fallback_counting once we move to f30
    rm -v /etc/grub.d/01_menu_auto_hide
    rm -v /usr/lib/systemd/user/grub-boot-success*

    # See machineid-compat in host-base.yaml.
    # Since that makes presets run on boot, we need to have our defaults in /usr
    ln -sfr /usr/lib/systemd/system/{multi-user,default}.target

    # Persistent journal by default
    echo 'Storage=persistent' >> /etc/systemd/journald.conf

    # https://github.com/openshift/os/issues/96
    # sudo group https://github.com/openshift/os/issues/96
    echo '%sudo        ALL=(ALL)       NOPASSWD: ALL' > /etc/sudoers.d/coreos-sudo-group

    # We're not using resolved yet
    rm -f /usr/lib/systemd/system/systemd-resolved.service

    # https://github.com/openshift/os/issues/191
    # install default PATH file to expand non-login shells PATH for kola
    cat > /etc/profile.d/path.sh << 'EOF'
    pathmunge /bin
    pathmunge /sbin
    pathmunge /usr/bin
    pathmunge /usr/sbin
    pathmunge /usr/local/bin
    pathmunge /usr/local/sbin
    EOF

    # https://github.com/coreos/fedora-coreos-tracker/issues/18
    # See also image.ks.
    # Growpart /, until we can fix Ignition for separate /var
    # (And eventually we want ignition-disks)
    cat > /usr/libexec/coreos-growpart << 'EOF'
    #!/bin/bash
    set -euo pipefail
    path=$1
    shift
    majmin=$(findmnt -nvr -o MAJ:MIN $path)
    devpath=$(realpath /sys/dev/block/$majmin)
    partition=$(cat $devpath/partition)
    parent_path=$(dirname $devpath)
    parent_device=/dev/$(basename ${parent_path})
    # TODO: make this idempotent, and don't error out if
    # we can't resize.
    growpart ${parent_device} ${partition} || true
    xfs_growfs /sysroot # this is already idempotent
    touch /var/lib/coreos-growpart.stamp
    EOF

    chmod a+x /usr/libexec/coreos-growpart
    cat > /usr/lib/systemd/system/coreos-growpart.service <<'EOF'
    [Unit]
    ConditionPathExists=!/var/lib/coreos-growpart.stamp
    Before=sshd.service
    [Service]
    ExecStart=/usr/libexec/coreos-growpart /
    RemainAfterExit=yes
    [Install]
    WantedBy=multi-user.target
    EOF

    # See https://github.com/coreos/ignition/issues/600
    # which originated from https://github.com/coreos/coreos-metadata/pull/90#discussion_r202438581
    cat > /usr/lib/systemd/system/coreos-useradd-core.service <<'EOF'
    [Unit]
    ConditionFirstBoot=true
    Before=sshd.service
    [Service]
    ExecStart=/usr/bin/sh -c 'if !getent passwd core &>/dev/null; then /usr/sbin/useradd -G wheel,sudo,adm,systemd-journal core; fi'
    RemainAfterExit=yes
    [Install]
    WantedBy=multi-user.target
    EOF
    
    # Create stand-in etcd-wrapper until upstream ignition makes this generic
    cat > /usr/lib/systemd/system/etcd-member.service << 'EOF'
    [Unit]
    Description=etcd (System Application Container)
    Documentation=https://github.com/coreos/etcd
    Wants=network-online.target network.target
    After=network-online.target
    Conflicts=etcd.service
    Conflicts=etcd2.service
    [Service]
    Restart=on-failure
    RestartSec=10s
    TimeoutStartSec=0
    LimitNOFILE=40000
    Environment="ETCD_IMAGE_TAG=v3.3.10"
    Environment="ETCD_NAME=%m"
    Environment="ETCD_USER=etcd"
    Environment="ETCD_DATA_DIR=/var/lib/etcd"
    Environment="CONTAINER_NAME=%N"
    ExecStartPre=-/usr/bin/podman rm "${CONTAINER_NAME}"
    ExecStart=/usr/lib/coreos/etcd-wrapper $ETCD_OPTS
    ExecStop=-/usr/bin/podman stop "${CONTAINER_NAME}"
    [Install]
    WantedBy=multi-user.target
    EOF
    
    mkdir -p /usr/lib/coreos
    cat > /usr/lib/coreos/etcd-wrapper << 'EOF'
    #!/usr/bin/bash -e
    # Wrapper for launching etcd via rkt.
    #
    # Make sure to set ETCD_IMAGE_TAG to an image tag published here:
    # https://quay.io/repository/coreos/etcd?tab=tags Alternatively,
    # override ETCD_IMAGE to a custom image.

    function require_ev_all() {
        for rev in $@ ; do
            if [[ -z "${!rev}" ]]; then
                echo ${rev} is not set
                exit 1
            fi
        done
    }

    function require_ev_one() {
        for rev in $@ ; do
            if [[ ! -z "${!rev}" ]]; then
                return
            fi
        done
        echo One of $@ must be set
        exit 1
    }

    require_ev_one ETCD_IMAGE ETCD_IMAGE_TAG
    require_ev_all ETCD_USER ETCD_DATA_DIR

    ETCD_IMAGE_URL="${ETCD_IMAGE_URL:-quay.io/coreos/etcd}"
    ETCD_IMAGE="${ETCD_IMAGE:-${ETCD_IMAGE_URL}:${ETCD_IMAGE_TAG}}"
    CONTAINER_NAME="${CONTAINER_NAME:-etcd-member}"

    if [[ ! -e "${ETCD_DATA_DIR}" ]]; then
        mkdir --parents "${ETCD_DATA_DIR}"
        chown "${ETCD_USER}" "${ETCD_DATA_DIR}"
    fi

    # Do not pass ETCD_DATA_DIR through to the container. The default path,
    # /var/lib/etcd is always used inside the container.
    etcd_data_dir="${ETCD_DATA_DIR}"
    ETCD_DATA_DIR="/var/lib/etcd"

    ETCD_IMAGE_ARGS="${ETCD_IMAGE_ARGS} -data-dir=${ETCD_DATA_DIR}"
    ETCD_SSL_DIR="${ETCD_SSL_DIR:-/etc/ssl/certs}"

    SYSTEMD_SYSTEM_DIR_SRC="${SYSTEMD_SYSTEM_DIR_SRC:-/run/systemd/system}"
    if [[ -d "${SYSTEMD_SYSTEM_DIR_SRC}" ]]; then
        PODMAN_RUN_ARGS="${PODMAN_RUN_ARGS} \
            --mount type=bind,ro=true,source=${SYSTEMD_SYSTEM_DIR_SRC},destination=/run/systemd/system \
        "
    fi

    PODMAN="${PODMAN:-/usr/bin/podman}"
    set -x
    exec ${PODMAN} ${PODMAN_GLOBAL_ARGS} \
        run ${PODMAN_RUN_ARGS} \
        --name ${CONTAINER_NAME} \
        --env 'ETCD_NAME=${ETCD_NAME}' \
        --env ETCD_DATA_DIR=${ETCD_DATA_DIR} \
        --network host \
        --user=$(id -u "${ETCD_USER}") \
        --mount type=bind,ro=true,source="${ETCD_SSL_DIR}",destination=/etc/ssl/certs/:ro \
        --mount type=bind,ro=true,source=/usr/share/pki,destination=/usr/share/ca-certificates \
        --mount type=bind,bind-propagation=z,source="${etcd_data_dir}",destination=/var/lib/etcd \
        ${ETCD_IMAGE} \
        /usr/local/bin/etcd \
        ${ETCD_IMAGE_ARGS} \
        "$@"
    EOF
    chmod a+x /usr/lib/coreos/etcd-wrapper
    
    # Add coreos toolbox using fedora image
    cat > /usr/bin/toolbox << 'EOF'
    #!/bin/bash
    set -eo pipefail

    trap cleanup EXIT

    setup() {
        REGISTRY=registry.fedoraproject.org
        IMAGE=fedora:latest
        TOOLBOX_NAME=toolbox-"${USER}"

        # Allow user overrides

        toolboxrc="${HOME}"/.toolboxrc
        if [ -f "${toolboxrc}" ]; then
            echo ".toolboxrc file detected, overriding defaults..."
            source "${toolboxrc}"
        fi
        TOOLBOX_IMAGE="${REGISTRY}"/"${IMAGE}"
    }

    run() {
        if ! image_exists; then
            image_pull
        fi

        if ! container_exists; then
            echo "Spawning a container '$TOOLBOX_NAME' with image '$TOOLBOX_IMAGE'"
            container_create
        else
            echo "Container '$TOOLBOX_NAME' already exists. Starting..."
            echo "(To remove the container and start with a fresh toolbox, run: sudo podman rm '$TOOLBOX_NAME')"
        fi

        local state=$(container_state)
        if [[ "$state" == configured ]] || [[ "$state" == exited ]]; then
            container_start
        elif [[ "$state" != running ]]; then
            echo "Container '$TOOLBOX_NAME' in unknown state: '$state'"
            return 1
        fi

        echo "Container started successfully."
        container_exec "$@"
    }

    cleanup() {
        sudo podman stop "$TOOLBOX_NAME" &>/dev/null
    }

    container_exists() {
        sudo podman inspect "$TOOLBOX_NAME" &>/dev/null
    }

    container_state() {
        sudo podman inspect "$TOOLBOX_NAME" --format '{{.State.Status}}'
    }

    image_exists() {
        sudo podman inspect "$TOOLBOX_IMAGE" &>/dev/null
    }

    image_pull() {
        if ! sudo podman pull "$TOOLBOX_IMAGE"; then
            read -r -p "Would you like to authenticate to registry: '${REGISTRY}' and try again? [y/N] "

            if [[ $REPLY =~ ^([Yy][Ee][Ss]|[Yy])+$ ]]; then
                sudo podman login "${REGISTRY}"
                sudo podman pull "$TOOLBOX_IMAGE"
            else
                echo "Exiting..."
                exit 1
            fi
        fi
    }

    container_create() {
        if ! sudo podman create \
                     --hostname toolbox \
                     --name "$TOOLBOX_NAME" \
                     --network host \
                     --privileged \
                     --security-opt label=disable \
                     --tty \
                     --volume /:/media/root:rslave \
                     "$TOOLBOX_IMAGE" 2>&1; then
            echo "$0: failed to create container '$TOOLBOX_NAME'"
            exit 1
        fi
    }

    container_start() {
        if ! sudo podman start "$TOOLBOX_NAME" 2>&1; then
            echo "$0: failed to start container '$TOOLBOX_NAME'"
            exit 1
        fi
    }

    container_exec() {
        sudo podman exec \
                --env LANG="$LANG" \
                --env TERM="$TERM" \
                --tty \
                "$TOOLBOX_NAME" \
                "$@"
    }

    main() {
        setup
        run "$@"
        cleanup
    }

    if [ ! -n "$*" ]; then
        set /bin/sh "$@"
    fi

    main "$@"
    EOF
    chmod a+x /usr/bin/toolbox

    cat >/usr/lib/systemd/system-preset/42-coreos.preset << EOF
    # Presets here that eventually should live in the generic fedora presets
    # This one is from https://github.com/coreos/ignition-dracut
    enable ignition-firstboot-complete.service
    enable coreos-growpart.service
    enable coreos-useradd-core.service
    enable console-login-helper-messages-*.service
    enable console-login-helper-messages-*.path
    EOF

    # Let's have a non-boring motd, just like CL (although theirs is more subdued
    # nowadays compared to early versions with ASCII art).  One thing we do here
    # is add --- as a "separator"; the idea is that any "dynamic" information should
    # be below that.
    cat > /etc/motd <<EOF
    Fedora CoreOS (preview)
    https://github.com/coreos/fedora-coreos-tracker
    WARNING: All aspects subject to change, highly experimental
    ---

    EOF

    # And mark as preview in the os-release too, this then shows up in eg. GRUB2
    sed -i -e 's/CoreOS/CoreOS preview/' $(realpath /etc/os-release)

packages:
  # SELinux
  - selinux-policy-targeted policycoreutils-python
  - setools-console
  # System setup
  - ignition ignition-dracut
  - dracut-network
  - passwd
  # SSH
  - openssh-server openssh-clients
  # Containers
  - podman skopeo runc moby-engine
  # Networking
  - bridge-utils nfs-utils iptables-services
  - NetworkManager dnsmasq hostname
  # Storage
  - cloud-utils-growpart
  - lvm2 iscsi-initiator-utils sg3_utils
  - device-mapper-multipath
  - xfsprogs e2fsprogs mdadm
  - cryptsetup
  # Time sync
  - chrony
  # Extra runtime
  - authconfig sssd shadow-utils
  - logrotate
  # Used by admins interactively
  - sudo coreutils less tar xz gzip bzip2 tmux
  - nmap-ncat net-tools bind-utils
  - bash-completion
  # Moving files around
  - rsync fuse-sshfs
  # User experience
  - console-login-helper-messages
  - console-login-helper-messages-motdgen
  - console-login-helper-messages-issuegen
  - console-login-helper-messages-profile
